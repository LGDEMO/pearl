package ${package}.service.impl;

import com.gemframework.bas.common.enums.ResultCode;
import com.gemframework.bas.common.exception.GemException;
import com.gemframework.bas.common.utils.GemBeanUtils;
import ${package}.model.po.${Entity};
import ${package}.model.vo.${Entity}Vo;
import ${package}.repository.${Entity}Repository;
import ${package}.service.${Entity}Service;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
public class ${Entity}ServiceImpl implements ${Entity}Service {

    @Resource
    private ${Entity}Repository ${entity}Repository;

    /**
     * @Title:  add
     * @MethodName:  add
     * @Param: [vo]
     * @Retrun: ${package}.model.po.${Entity}
     * @Description: 添加
     * @Date: ${datetime}
     */
    @Override
    public ${Entity}Vo add(${Entity}Vo vo) {
        ${Entity} ${entity} = new ${Entity}();
        GemBeanUtils.copyProperties(vo,${entity});
        ${entity} = ${entity}Repository.save(${entity});
        GemBeanUtils.copyProperties(${entity},vo);
        return vo;
    }

    /**
     * @Title:  findListAll
     * @MethodName:  findListAll
     * @Param: []
     * @Retrun: java.util.List
     * @Description:  查询所有数据列表
     * @Date: ${datetime}
     */
    @Override
    public List<${Entity}Vo> findListAll() {
        List<${Entity}> list = ${entity}Repository.findAll();
        List<${Entity}Vo> vos = GemBeanUtils.copyCollections(list,${Entity}Vo.class);
        return vos;
    }

    /**
     * @Title:  findListByParams
     * @MethodName:  findListByParams
     * @Param: [vo]
     * @Retrun: java.util.List
     * @Description: 动态查询数据
     * //创建匹配器，即使用查询条件
     * @Date: ${datetime}
     */
    @Override
    public List<${Entity}Vo> findListByParams(${Entity}Vo vo) {
        ${Entity} ${entity} = new ${Entity}();
        GemBeanUtils.copyProperties(vo,${entity});
        Example<${Entity}> example =Example.of(${entity});
        List<${Entity}> list = ${entity}Repository.findAll(example);
        List<${Entity}Vo> vos = GemBeanUtils.copyCollections(list,${Entity}Vo.class);
        return vos;
    }

    /**
     * @Title:  findPageAll
     * @MethodName:  findPageAll
     * @Param: [pageable]
     * @Retrun: org.springframework.data.domain.Page
     * @Description: 【分页】查询所有数据
     * @Date: ${datetime}
     */
    @Override
    public List<${Entity}Vo> findPageAll(Pageable pageable) {
        Page<${Entity}> page = ${entity}Repository.findAll(pageable);
        List<${Entity}> list = page.getContent();
        List<${Entity}Vo> vos = GemBeanUtils.copyCollections(list,${Entity}Vo.class);
        return vos;
    }

    /**
     * @Title:  findPageByParams
     * @MethodName:  findPageByParams
     * @Param: [vo, pageable]
     * @Retrun: org.springframework.data.domain.Page
     * @Description: 【分页】根据条件动态查询
     * @Date: ${datetime}
     */
    @Override
    public List<${Entity}Vo> findPageByParams(${Entity}Vo vo,Pageable pageable) {
        ${Entity} ${entity} = new ${Entity}();
        GemBeanUtils.copyProperties(vo,${entity});
        Example<${Entity}> example =Example.of(${entity});
        Page<${Entity}> page = ${entity}Repository.findAll(example,pageable);
        List<${Entity}> list = page.getContent();
        List<${Entity}Vo> vos = GemBeanUtils.copyCollections(list,${Entity}Vo.class);
        return vos;
    }


    /**
     * @Title: 根据ID获取对象
     * @Param: id
     * @Retrun: Entity
     * @Description:
     * @Date: 2019/12/5 22:40
     */
    @Override
    public ${Entity}Vo getById(Long id) {
        ${Entity}Vo ${entity}Vo = new ${Entity}Vo();
        ${Entity} ${entity} = ${entity}Repository.getById(id);
        GemBeanUtils.copyProperties(${entity},${entity}Vo);
        return ${entity}Vo;
    }

    /**
     * @Title:  update
     * @MethodName:  update
     * @Param: [vo]
     * @Retrun: com.gemframework.bas.model.po.User
     * @Description: 更新数据
     * @Date: ${datetime}
     */
    @Override
    public ${Entity}Vo update(${Entity}Vo vo) {
        Optional<${Entity}> optional= ${entity}Repository.findById(vo.getId());
        if(optional.isPresent()){
            ${Entity} ${entity} = optional.get();
            GemBeanUtils.copyProperties(vo,${entity});
            ${entity} = ${entity}Repository.save(${entity});
            GemBeanUtils.copyProperties(${entity},vo);
            return vo;
        }
        return null;

    }

    /**
     * @Title:  delete
     * @MethodName:  delete
     * @Param: [id]
     * @Retrun: void
     * @Description: 根据ID删除数据
     * @Date: ${datetime}
     */
    @Override
    public void delete(Long id) {
        if(!${entity}Repository.existsById(id)){
            throw new GemException(ResultCode.DATA_NOT_EXIST);
        }
        ${entity}Repository.deleteById(id);

    }
}
