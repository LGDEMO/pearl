package ${package}.service.impl;

import com.gemframework.base.common.enums.ResultCode;
import com.gemframework.base.common.exception.GemException;
import com.gemframework.base.common.utils.GemBeanUtils;
import ${package}.model.po.${Entity};
import ${package}.model.vo.${Entity}Vo;
import ${package}.repository.${Entity}Repository;
import ${package}.service.${Entity}Service;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
public class ${Entity}ServiceImpl implements ${Entity}Service {

    @Resource
    private ${Entity}Repository ${entity}Repository;

    /**
     * @Title:  add
     * @MethodName:  add
     * @Param: [vo]
     * @Retrun: ${package}.model.po.${Entity}
     * @Description: 添加
     * @Date: ${datetime}
     */
    @Override
    public ${Entity} add(${Entity}Vo vo) {
        ${Entity} ${entity} = new ${Entity}();
        GemBeanUtils.copyProperties(vo,${entity});
        ${entity}Repository.save(${entity});
        return ${entity};
    }

    /**
     * @Title:  findListAll
     * @MethodName:  findListAll
     * @Param: []
     * @Retrun: java.util.List
     * @Description:  查询所有数据列表
     * @Date: ${datetime}
     */
    @Override
    public List findListAll() {
        List<User> list = ${entity}Repository.findAll();
        return list;
    }

    /**
     * @Title:  findListByParams
     * @MethodName:  findListByParams
     * @Param: [vo]
     * @Retrun: java.util.List
     * @Description: 动态查询数据
     * //创建匹配器，即如何使用查询条件
     *         ExampleMatcher matcher = ExampleMatcher.matching()
     *                 .withMatcher("username", ExampleMatcher.GenericPropertyMatchers.startsWith())//模糊查询匹配开头，即{username}%
     *                 .withMatcher("address" ,ExampleMatcher.GenericPropertyMatchers.contains())//全部模糊查询，即%{address}%
     *                 .withIgnorePaths("password");//忽略字段，即不管password是什么值都不加入查询条件
     *         //创建实例
     *         User user = new User();
     *         GemBeanUtils.copyProperties(vo,user);
     *         Example<User> example =Example.of(user,matcher);
     * @Date: ${datetime}
     */
    @Override
    public List findListByParams(${Entity}Vo vo) {
        ${Entity} ${entity} = new ${Entity}();
        GemBeanUtils.copyProperties(vo,${entity});
        Example<${Entity}> example =Example.of(${entity});
        List<${Entity}> list = ${entity}Repository.findAll(example);
        return list;
    }

    /**
     * @Title:  findPageAll
     * @MethodName:  findPageAll
     * @Param: [pageable]
     * @Retrun: org.springframework.data.domain.Page
     * @Description: 【分页】查询所有数据
     * @Date: ${datetime}
     */
    @Override
    public Page findPageAll(Pageable pageable) {
        Page<${Entity}> page = ${entity}Repository.findAll(pageable);
        return page;
    }

    /**
     * @Title:  findPageByParams
     * @MethodName:  findPageByParams
     * @Param: [vo, pageable]
     * @Retrun: org.springframework.data.domain.Page
     * @Description: 【分页】根据条件动态查询
     * @Date: ${datetime}
     */
    @Override
    public Page findPageByParams(${Entity}Vo vo,Pageable pageable) {
        ${Entity} ${entity} = new ${Entity}();
        GemBeanUtils.copyProperties(vo,${entity});
        Example<${Entity}> example =Example.of(${entity});
        Page<${Entity}> page = ${entity}Repository.findAll(example,pageable);
        return page;
    }

    /**
     * @Title:  update
     * @MethodName:  update
     * @Param: [vo]
     * @Retrun: com.gemframework.base.model.po.User
     * @Description: 更新数据
     * @Date: ${datetime}
     */
    @Override
    public ${Entity} update(${Entity}Vo vo) {
        Optional<${Entity}> optional= ${entity}Repository.findById(vo.getId());
        if(optional.isPresent()){
            ${Entity} ${entity} = optional.get();
            GemBeanUtils.copyProperties(vo,${entity});
            ${entity}Repository.save(${entity});
            return ${entity};
        }
        return null;

    }

    /**
     * @Title:  delete
     * @MethodName:  delete
     * @Param: [id]
     * @Retrun: void
     * @Description: 根据ID删除数据
     * @Date: ${datetime}
     */
    @Override
    public void delete(Long id) {
        ${entity}Repository.deleteById(id);
    }
}
